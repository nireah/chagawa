package com.chagawa.epilogue.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.chagawa.epilogue.vo.EpilogueVO;
import com.chagawa.io.db.DB;
import com.chagawa.starPoint.vo.StarPointVO;
import com.webjjang.util.PageObject;

public class EpilogueDAOImpl implements EpilogueDAO{
	
	private Connection con = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;

	// 후기
	@Override
	public List<EpilogueVO> list(PageObject pageObject) throws Exception {
		
		System.out.println("EpilogueDAOImpl.list()");
		
		// 결과 전달 변수
		List<EpilogueVO> list = null;
		try {
			
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			//  3-1. 원본 데이터 가져오기
			String sql = "select no, title, writer, "
					+ " to_char(writeDate, 'yyyy-mm-dd') writeDate, hit "
					+ " from epilogue ";
			// 검색 조건 처리
			sql += searchSQL(pageObject);
			sql	+= " order by no desc ";
			//  3-2. 순서 번호 붙이기
			sql = " select rownum rnum, no, title, writer, writeDate, hit "
				+ " from (" + sql + ")";
			//  3-3. 페이지 데이터 조건문
			sql = " select no, title, writer, writeDate, hit "
					+ " from (" + sql + ") where rnum between ? and ? ";
			
			System.out.println("EpilogueDAOImpl.list().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			int idx = 0;
			// 검색에 대한 데이터 세팅
			idx = searchDataSet(pageObject, idx);
			pstmt.setLong(++idx, pageObject.getStartRow());
			pstmt.setLong(++idx, pageObject.getEndRow());
			// 5. 실행 -> rs
			rs = pstmt.executeQuery();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			if(rs != null) {
				
				// rs에 다음 데이터가 있으면 처리
				while(rs.next()) {
					
					// list가 null 이면 한번만 생생
					if(list == null) list = new ArrayList<>();
					// 데이터를 담을 vo 객체를 생성한다.
					EpilogueVO vo = new EpilogueVO();
					// rs에 데이터를 꺼내서 vo에 담는다.
					vo.setNo(rs.getLong("no"));
					vo.setTitle(rs.getString("title"));
					vo.setWriter(rs.getString("writer"));
					vo.setWriteDate(rs.getString("writeDate"));
					vo.setHit(rs.getLong("hit"));
					// 데이터가 담긴 vo를 list에 담는다.
					list.add(vo);
					
				}// end of while
				
			} // end of if
			
		} catch (Exception e) {
		
			e.printStackTrace(); 
			throw new Exception("후기 리스트 DB 처리 중 오류 발생");
			
		} finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
			
		} // end of try ~ catch ~ finally
		
		return list;
		
	} // end of list()
	
	// 검색을 위한 sql 작성
	private String searchSQL(PageObject pageObject) {
		String sql = "";
		String word = pageObject.getWord();
		String key = pageObject.getKey();
		if(word != null && !word.equals("")) {
			sql += " where (1=0 ";
			if(key.indexOf("t") >= 0) sql += " or title like ? ";
			if(key.indexOf("c") >= 0) sql += " or content like ? ";
			if(key.indexOf("w") >= 0) sql += " or writer like ? ";
			sql += ") ";
		}
		return sql;
	} // end of searchSQL()
	
	// 검색을 위한 데이터 세팅
	private int searchDataSet(PageObject pageObject, int idx) throws SQLException {
		String word = pageObject.getWord();
		String key = pageObject.getKey();
		if(word != null && !word.equals("")) {			
			if(key.indexOf("t") >= 0) pstmt.setString(++idx, "%" + word + "%");
			if(key.indexOf("c") >= 0) pstmt.setString(++idx, "%" + word + "%");
			if(key.indexOf("w") >= 0) pstmt.setString(++idx, "%" + word + "%");
		}
		return idx;
	}

	@Override
	public long getTotalRow(PageObject pageObject) throws Exception {
		
		System.out.println("EpilogueDAOImpl.getTotalRow().pageObject : " + pageObject);
		// 리턴 데이터 선언
		long totalRow = 0;
		
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "select count(*) from epilogue ";
			sql += searchSQL(pageObject);
			System.out.println("EpilogueDAOImpl.getTotalRow().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			int idx = 0;
			idx = searchDataSet(pageObject, idx);
			// 5. 실행 -> rs
			rs = pstmt.executeQuery();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			if(rs != null && rs.next()) {
				
				// rs에 다음 데이터가 있으면 처리
				totalRow = rs.getLong(1);
			} // end of if
			
		} catch (Exception e) {
			
			e.printStackTrace();
			throw new Exception("후기글 리스트를 위한 전체 데이터 개수 DB 처리 중 오류 발생");
		} finally {
			
			// 7. 닫기
			DB.close(con, pstmt, rs);
			
		} // end of try ~ catch ~ finally
		
		return totalRow;
		
	} // end of getTotalRow()

	@Override
	public EpilogueVO view(long no) throws Exception {
		
		System.out.println("EpilogueDAOImpl.view().no : " + no);
		// 리턴 데이터 선언
		EpilogueVO vo = null;
		
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = " select no, title, content, writer, "
					+ " to_char(writeDate, 'yyyy-mm-dd') writeDate, "
					+ " cpNo, hit "
					+ " from epilogue where no = ? ";
			System.out.println("EpilogueDAOImpl.view().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, no);
			// 5. 실행 -> rs
			rs = pstmt.executeQuery();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			if(rs != null && rs.next()) {
				// rs에 다음 데이터가 있으면 처리
				vo = new EpilogueVO();
				// rs에 데이터를 꺼내서 vo에 담는다.
				vo.setNo(rs.getLong("no"));
				vo.setTitle(rs.getString("title"));
				vo.setContent(rs.getString("content"));
				vo.setWriter(rs.getString("writer"));
				vo.setWriteDate(rs.getString("writeDate"));
				vo.setCpNo(rs.getLong("cpNo"));
				vo.setHit(rs.getLong("hit"));
			} // end of if
			
		} catch (Exception e) {
			
			e.printStackTrace(); 
			throw new Exception("후기 글 보기 DB 처리 중 오류 발생");
			
		} finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
		} // end of try ~ catch ~ finally
		
		return vo;
		
	} // end of view()

	@Override
	public int increase(long no) throws Exception {
		
		System.out.println("EpilogueDAOImpl.increase().no : " + no);
		int result = 0;
		
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "update epilogue set hit = hit + 1 where no = ? ";
			System.out.println("EpilogueDAOImpl.increase().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, no);
			// 5. 실행 -> rs
			result = pstmt.executeUpdate();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			if(result == 1) {
				System.out.println("EpilogueDAOImpl.increase() - 조회수 1 증가 완료");
			} else{
				throw new Exception("보고자 하는 글번호가 존재하지 않습니다.");
			} // end of if
		} catch (Exception e) {
			
			e.printStackTrace();
			throw new Exception("후기 글 보기 DB 처리 중 오류 발생");
			
		} finally {
			// 7. 닫기
			DB.close(con, pstmt);
		} // end of try ~ catch ~ finally
		
		return result;
		
	} // end of increase()

	@Override
	public int write(EpilogueVO vo) throws Exception {
		System.out.println("EpilogueDAOImpl.write().vo : " + vo);
		int result = 0;
		
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "insert into epilogue(no, title, content, writer, cpNo) "
					+ " values(epilogue_seq.nextval, ?, ?, ?, ?)";
			System.out.println("EpilogueDAOImpl.write().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, vo.getTitle());
			pstmt.setString(2, vo.getContent());
			pstmt.setString(3, vo.getWriter());
			pstmt.setLong(4, vo.getCpNo());
			// 5. 실행 -> rs
			result = pstmt.executeUpdate();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			System.out.println("EpilogueDAOImpl.write() - 글등록 완료");
		} catch (Exception e) {
			
			e.printStackTrace();
			throw new Exception("후기 작성 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt);
		} // end of try ~ catch ~ finally
			
		return result;
		
	} // end of write()

	@Override
	public int update(EpilogueVO vo) throws Exception {
		System.out.println("EpilogueDAOImpl.update().vo : " + vo);
		int result = 0;
		
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "update epilogue set title = ?, content=? "
					+ " where no = ? ";
			System.out.println("EpilogueDAOImpl.update().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, vo.getTitle());
			pstmt.setString(2, vo.getContent());
			pstmt.setLong(3, vo.getNo());
			// 5. 실행 -> rs
			result = pstmt.executeUpdate();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			System.out.println("EpilogueDAOImpl.update() - 글수정 완료");
		} catch (Exception e) {
			
			e.printStackTrace(); 
			throw new Exception("글 수정 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt);
		} // end of try ~ catch ~ finally
		
		return result;
		
	} // end of update()

	@Override
	public int delete(EpilogueVO vo) throws Exception {
		System.out.println("EpilogueDAOImpl.delete().vo : " + vo);
		int result = 0;
		
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "delete from epilogue "
					+ " where no = ? ";
			System.out.println("EpilogueDAOImpl.delete().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, vo.getNo());
			// 5. 실행 -> rs
			result = pstmt.executeUpdate();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			System.out.println("EpilogueDAOImpl.delete() - 글삭제 완료");
		} catch (Exception e) {
			
			e.printStackTrace(); 
			throw new Exception("글 삭제 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt);
		} // end of try ~ catch ~ finally
		
		return result;
		
	} // end of delete()
	
	// 별점
	@Override
	public int starPoint(StarPointVO vo) throws Exception {
		System.out.println("StarPointDAOImpl.write().vo : " + vo);
		int result = 0;
		
		try {
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "insert into starPoint(no, cpNo, starter, receiver, star) "
					+ " values(starPoint_seq.nextval, ?, ?, ?, ?)";
			System.out.println("StarPointDAOImpl.write().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, vo.getCpNo());
			pstmt.setString(2, vo.getStarter());
			pstmt.setString(3, vo.getReceiver());
			pstmt.setLong(4, vo.getStar());
			// 5. 실행 -> rs
			result = pstmt.executeUpdate();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			System.out.println("StarPointDAOImpl.write() - 별점등록 완료");
		} catch (Exception e) {
			
			e.printStackTrace();
			throw new Exception("별점 등록 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt);
		} // end of try ~ catch ~ finally
			
		return result;
		
	} // end of starPoint()

	@Override
	public List<StarPointVO> slist(PageObject pageObject) throws Exception {
		
		System.out.println("EpilogueDAOImpl.Slist()");
		
		// 결과 전달 변수
		List<StarPointVO> slist = null;
		try {
			
			// 1. 확인 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "select receiver, to_char(avg(star), '99.00') avg "
					+ " from starPoint group by receiver";
			// 검색 조건 처리
			sql += searchSQL(pageObject);
			System.out.println("EpilogueDAOImpl.slist().sql : " + sql);
			// 4. 실행객체 & 데이터 세팅
			pstmt = con.prepareStatement(sql);
			int idx = 0;
			// 검색에 대한 데이터 세팅
			idx = searchDataSet(pageObject, idx);
			pstmt.setLong(++idx, pageObject.getStartRow());
			pstmt.setLong(++idx, pageObject.getEndRow());
			// 5. 실행 -> rs
			rs = pstmt.executeQuery();
			// 6. 데이터 저장 - list
			// rs가 null 이 아니면 처리하자
			if(rs != null) {
				
				// rs에 다음 데이터가 있으면 처리
				while(rs.next()) {
					
					// list가 null 이면 한번만 생생
					if(slist == null) slist = new ArrayList<>();
					// 데이터를 담을 vo 객체를 생성한다.
					StarPointVO vo = new StarPointVO();
					// rs에 데이터를 꺼내서 vo에 담는다.
					vo.setReceiver(rs.getString("receiver"));
					vo.setStar(rs.getLong("star"));
					// 데이터가 담긴 vo를 list에 담는다.
					slist.add(vo);
					
				}// end of while
				
			} // end of if
			
		} catch (Exception e) {
		
			e.printStackTrace(); 
			throw new Exception("후기 리스트 DB 처리 중 오류 발생");
			
		} finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
			
		} // end of try ~ catch ~ finally
		
		return slist;
	}

} // end of EpilogueDAOImpl class

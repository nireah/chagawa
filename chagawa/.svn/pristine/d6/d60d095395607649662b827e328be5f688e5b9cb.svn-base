package com.chagawa.notice.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.chagawa.io.db.DB;
import com.chagawa.notice.vo.NoticeVO;
import com.webjjang.util.PageObject;

public class NoticeDAOImpl implements NoticeDAO {

	private Connection con = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;

	// 리스트
	@Override
	public List<NoticeVO> list(PageObject pageObject) throws Exception {
		// TODO Auto-generated method stub

		List<NoticeVO> list = null;

		try {
			// 1. 확인, 2. 연결
			con = DB.getConnection();
			// 3. sql
			// 3-1. 원본 데이터 가져오기
			String sql = "select no, title, to_char(startDate, 'yyyy-mm-dd') startDate, to_char(endDate, 'yyyy-mm-dd') endDate, to_char(updateDate, 'yyyy-mm-dd') updateDate from notice ";
			// 검색 조건 처리
			sql += searchSQL(pageObject);
			sql += " order by no desc";
			// 3-2. 순서 번호 붙이기
			sql = "select rownum, rnum, no, title, startDate, endDate, updateDate from (" + sql + ")";
			// 3-3. 페이지 데이터 조건문
			sql = "select no, title, startDate, endDate, updateDate from (" + sql + ") where rnum between ? and ? ";
			// 4. 실행 객체, 데이터 세팅
			pstmt = con.prepareStatement(sql);
			int idx = 0;
			// 검색 데이터 세팅
			idx = searchDataSet(pageObject, idx);
			pstmt.setLong(++idx, pageObject.getStartRow());
			pstmt.setLong(++idx, pageObject.getEndRow());
			// 5. 실행
			rs = pstmt.executeQuery();
			// 6. 데이터 저장
			if (rs != null) {
				while (rs.next()) {
					if (list == null)
						list = new ArrayList<>();
					NoticeVO vo = new NoticeVO();
					vo.setNo(rs.getLong("no"));
					vo.setTitle(rs.getString("title"));
					vo.setWriteDate("startDate");
					vo.setEndDate(rs.getString("endDate"));
					vo.setUpdateDate(rs.getString("updateDate"));
					list.add(vo);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new Exception("리스트 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
		}
		return list;
	} // end of list

	// 검색 sql
	private String searchSQL(PageObject pageObject) {
		String sql = "";
		String word = pageObject.getWord();
		String key = pageObject.getKey();
		if (word != null && !word.equals("")) {
			sql += " where (1=0 ";
			if (key.indexOf("t") >= 0)
				sql += " or title like ? ";
			if (key.indexOf("c") >= 0)
				sql += " or content like ? ";
			sql += ") ";
		}
		return sql;
	} // end of searchSQL

	// 검색 데이터 세팅
	private int searchDataSet(PageObject pageObject, int idx) throws SQLException {
		String word = pageObject.getWord();
		String key = pageObject.getKey();
		if (word != null && !word.equals("")) {
			if (key.indexOf("t") >= 0)
				pstmt.setString(++idx, "%" + word + "%");
			if (key.indexOf("c") >= 0)
				pstmt.setString(++idx, "%" + word + "%");
		}
		return idx;
	} // end of searchDataSet

	// getTotalRow
	@Override
	public long getTotalRow(PageObject pageObject) throws Exception {
		// TODO Auto-generated method stub
		long totalRow = 0;
		try {
			// 1. 확인, 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "select count(*) from notice";
			sql += searchSQL(pageObject);
			// 4. 실행 객체, 데이터 세팅
			pstmt = con.prepareStatement(sql);
			int idx = 0;
			idx = searchDataSet(pageObject, idx);
			// 5. 실행
			rs = pstmt.executeQuery();
			// 6. 데이터 저장
			if (rs != null & rs.next()) {
				totalRow = rs.getLong(1);
			} // end of if
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new Exception("전체 데이터 개수 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
		}
		return totalRow;
	} // end of getTotalRow

	// 상세 보기
	@Override
	public NoticeVO view(long no) throws Exception {
		// TODO Auto-generated method stub
		NoticeVO vo = null;
		try {
			// 1. 확인, 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "select no, title, content, to_char(startDate, 'yyyy-mm-dd') startDate, to_char(endDate, 'yyyy-mm-dd') endDate, to_char(updateDate, 'yyyy-mm-dd') updateDate, gnrFile, imgFile from notice where no = ?";
			// 4. 실행 객체, 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, no);
			// 5. 실행
			rs = pstmt.executeQuery();
			// 6. 데이터 저장
			if (rs != null & rs.next()) {
				vo = new NoticeVO();
				vo.setNo(rs.getLong("no"));
				vo.setTitle(rs.getString("title"));
				vo.setContent(rs.getString("content"));
				vo.setStartDate(rs.getString("startDate"));
				vo.setEndDate(rs.getString("endDate"));
				vo.setUpdateDate(rs.getString("updateDate"));
				vo.setGnrFile(rs.getString("gnrFile"));
				vo.setImgFile(rs.getString("imgFile"));
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new Exception("상세 보기 DB 처리 중 오류 발생");
		} finally {
			// 7. 닫기
			DB.close(con, pstmt, rs);
		}
		return vo;
	} // end of view

	// 작성
	@Override
	public int write(NoticeVO vo) throws Exception {
		// TODO Auto-generated method stub
		int result = 0;

		try {
			// 1. 확인, 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "insert into notice(no, title, content, startDate, endDate, gnrFile, imgFile) values(notice_seq.nextval, ?, ?, ?, ?, ?, ?)";
			// 4. 실행 객체, 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, vo.getTitle());
			pstmt.setString(2, vo.getContent());
			pstmt.setString(3, vo.getStartDate());
			pstmt.setString(4, vo.getEndDate());
			pstmt.setString(5, vo.getGnrFile());
			pstmt.setString(6, vo.getImgFile());
			// 5. 실행
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new Exception("등록 DB 처리 중 오류 발생");
		} finally {
			// 6. 닫기
			DB.close(con, pstmt);
		}

		return result;
	} // end of write

	// 수정
	@Override
	public int update(NoticeVO vo) throws Exception {
		// TODO Auto-generated method stub
		int result = 0;

		try {
			// 1. 확인, 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "update notice set title = ?, content = ?, startDate = ?, endDate = ?, gnrFile = ?, imgFile = ? where no = ?";
			// 4. 실행 객체, 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, vo.getTitle());
			pstmt.setString(2, vo.getContent());
			pstmt.setString(3, vo.getStartDate());
			pstmt.setString(4, vo.getEndDate());
			pstmt.setString(5, vo.getGnrFile());
			pstmt.setString(6, vo.getImgFile());
			// 5. 실행
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new Exception("수정 DB 처리 중 오류 발생");
		} finally {
			DB.close(con, pstmt);
		}
		return result;
	} // end of update

	// 삭제
	@Override
	public int delete(NoticeVO vo) throws Exception {
		// TODO Auto-generated method stub
		int result = 0;

		try {
			// 1. 확인, 2. 연결
			con = DB.getConnection();
			// 3. sql
			String sql = "delete from notice where no = ?";
			// 4. 실행 객체, 데이터 세팅
			pstmt = con.prepareStatement(sql);
			pstmt.setLong(1, vo.getNo());
			// 5. 실행
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			throw new Exception("삭제 DB 처리 중 오류 발생");
		} finally {
			DB.close(con, pstmt);
		}
		return result;
	} // end of delete

}

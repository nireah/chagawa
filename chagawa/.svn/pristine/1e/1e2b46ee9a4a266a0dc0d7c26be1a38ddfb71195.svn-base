package com.chagawa.member.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import com.chagawa.main.Execute;
import com.chagawa.main.ServiceInterface;
import com.chagawa.member.vo.LoginVO;
import com.chagawa.member.vo.MemberVO;

public class MemberController {
	
	private ServiceInterface memberLoginService;
	private ServiceInterface memberJoinService;
	private ServiceInterface memberCheckService;
	private ServiceInterface memberCheckDService;
	private ServiceInterface memberMyPageDService;
	private ServiceInterface memberMyPagePService;
	private ServiceInterface memberListService;
	private ServiceInterface memberViewPService;
	private ServiceInterface memberViewDService;
	private ServiceInterface memberChangeStatusService;
	private ServiceInterface memberChangeGradeService;
	private ServiceInterface memberLeaveService;
	private ServiceInterface memberUpdateService;
	private ServiceInterface memberUpdateDService;
	private ServiceInterface memberJoinDriverService;
	private ServiceInterface memberChangePwService;
	private ServiceInterface memberFindPwService;
	private ServiceInterface memberFindIdService;
	
	
	public void setMemberLoginService(ServiceInterface memberLoginService) {
		this.memberLoginService = memberLoginService;
	}
	public void setMemberJoinService(ServiceInterface memberJoinService) {
		this.memberJoinService = memberJoinService;
	}
	public void setMemberCheckService(ServiceInterface memberCheckService) {
		this.memberCheckService = memberCheckService;
	}
	public void setMemberCheckDService(ServiceInterface memberCheckDService) {
		this.memberCheckDService = memberCheckDService;
	}
	public void setMemberMyPageDService(ServiceInterface memberMyPageDService) {
		this.memberMyPageDService = memberMyPageDService;
	}
	public void setMemberMyPagePService(ServiceInterface memberMyPagePService) {
		this.memberMyPagePService = memberMyPagePService;
	}
	public void setMemberListService(ServiceInterface memberListService) {
		this.memberListService = memberListService;
	}
	public void setMemberViewPService(ServiceInterface memberViewPService) {
		this.memberViewPService = memberViewPService;
	}
	public void setMemberViewDService(ServiceInterface memberViewDService) {
		this.memberViewDService = memberViewDService;
	}
	public void setMemberChangeStatusService(ServiceInterface memberChangeStatusService) {
		this.memberChangeStatusService = memberChangeStatusService;
	}
	public void setMemberChangeGradeService(ServiceInterface memberChangeGradeService) {
		this.memberChangeGradeService = memberChangeGradeService;
	}
	public void setMemberLeaveService(ServiceInterface memberLeaveService) {
		this.memberLeaveService = memberLeaveService;
	}
	public void setMemberUpdateService(ServiceInterface memberUpdateService) {
		this.memberUpdateService = memberUpdateService;
	}
	public void setMemberUpdateDService(ServiceInterface memberUpdateDService) {
		this.memberUpdateDService = memberUpdateDService;
	}
	public void setMemberJoinDriverService(ServiceInterface memberJoinDriverService) {
		this.memberJoinDriverService = memberJoinDriverService;
	}
	public void setMemberChangePwService(ServiceInterface memberChangePwService) {
		this.memberChangePwService = memberChangePwService;
	}
	public void setMemberFindPwService(ServiceInterface memberFindPwService) {
		this.memberFindPwService = memberFindPwService;
	}
	public void setMemberFindIdService(ServiceInterface memberFindIdService) {
		this.memberFindIdService = memberFindIdService;
	}
	

	public String execute(HttpServletRequest request) throws Exception {
		System.out.println("MemberController----------------------");
		String uri = request.getRequestURI();
		String method = request.getMethod();
		String jsp = null;
		HttpSession session = request.getSession();
		
		
		switch (uri) {
		case "/member/login.do":
			if(method.equals("GET")) {
				jsp = "member/login";
			} else {
				LoginVO loginVO = new LoginVO();
				loginVO.setId(request.getParameter("id"));
				loginVO.setPw(request.getParameter("pw"));
				
				LoginVO statusVO = new LoginVO();
				statusVO = (LoginVO) Execute.run(memberLoginService, loginVO);
				session.setAttribute("login", statusVO);
				if(statusVO == null) {
					request.setAttribute("wrong", 1);
					jsp = "member/login";
				} else if(statusVO.getStatus().equals("탈퇴")) {
					request.setAttribute("wrong", 2);
					jsp = "member/login";
				} else if(statusVO.getStatus().equals("이용정지")) {
					request.setAttribute("wrong", 3);
					jsp = "member/login";
				} else {
					jsp = "redirect:/";
				}
			}
			break;
			
		case "/member/join.do":
			if(method.equals("GET")) {
				jsp = "member/join";
			} else {
				MemberVO joinVO = new MemberVO();
				joinVO.setId(request.getParameter("id"));
				joinVO.setPw(request.getParameter("pw"));
				joinVO.setNickname(request.getParameter("nickname"));
				joinVO.setName(request.getParameter("name"));
				joinVO.setProfileImage(request.getParameter("profileImage"));
				joinVO.setBirth(request.getParameter("birth_y")+"."+request.getParameter("birth_m")+"."+request.getParameter("birth_d"));
				joinVO.setGender(request.getParameter("gender"));
				joinVO.setTel(request.getParameter("tel_1")+"-"+request.getParameter("tel_2")+"-"+request.getParameter("tel_3"));
				joinVO.setBank(request.getParameter("bank"));
				joinVO.setAccount(request.getParameter("account"));
				
				Execute.run(memberJoinService, joinVO);
				jsp = "redirect:/";
			}
			break;
			
		case "/member/checkId.do":
			String id = request.getParameter("id");
			if(Execute.run(memberCheckService, new Object[] {id, "id"}) != null) {
				request.setAttribute("type", 1);
				jsp = "member/checkId";
			} else {
				request.setAttribute("type", 2);
				jsp = "member/checkId";
			}
			break;
			
		case "/member/checkNickname.do":
//			checkService(session, request, jsp, "nickname", "Nickname");
			// 중복확인할 값
			String nickname = request.getParameter("nickname");
			System.out.println("#" + nickname);
			// 확인된 중복된 값
			String checkNickname = (String) Execute.run(memberCheckService, new Object[] {nickname, "nickname"});
			System.out.println("##" + checkNickname);
			// 현재 세션의 아이디
			String sessId = (String) session.getAttribute("id");
			System.out.println("###" + sessId);
			// 중복되고 로그인 상태라면(수정할 때의 경우)
			if(checkNickname != null && sessId != null) {
				System.out.println("여기로와야함");
				MemberVO checkNicknameVO = (MemberVO) Execute.run(memberViewPService, sessId);
				// 중복된 값이 로그인된 아이디의 값과 일치한다면
				if(checkNickname.equals(checkNicknameVO.getNickname())) {
					request.setAttribute("type", 2);
					jsp = "member/checkNickname";
				} else {
					request.setAttribute("type", 1);
					jsp = "member/checkNickname";
				}
			// 중복되고 로그인 안 한 상태라면 (회원가입의 경우)
			} else if(checkNickname != null && sessId == null) {
				request.setAttribute("type", 1);
				jsp = "member/checkNickname";
			// 중복 안 된 상태
			} else {
				request.setAttribute("type", 2);
				jsp = "member/checkNickname";
			}
			break;
			
		case "/member/checkTel.do":
			// 중복확인할 값
			String tel = request.getParameter("tel_1")+"-"+request.getParameter("tel_2")+"-"+request.getParameter("tel_3");
			request.setAttribute("tel_1", request.getParameter("tel_1"));
			request.setAttribute("tel_2", request.getParameter("tel_2"));
			request.setAttribute("tel_3", request.getParameter("tel_3"));
			// 확인된 중복된 값
			String checkTel = (String) Execute.run(memberCheckService, new Object[] {tel, "tel"});
			// 현재 세션의 아이디
			sessId = (String) session.getAttribute("id");
			// 중복되고 로그인 상태라면(수정할 때의 경우)
			if(checkTel != null && sessId != null) {
				MemberVO checkTelVO = (MemberVO) Execute.run(memberViewPService, sessId);
				// 중복된 값이 로그인된 아이디의 값과 일치한다면
				if(checkTel.equals(checkTelVO.getNickname())) {
					request.setAttribute("type", 2);
					jsp = "member/checkTel";
				} else {
					request.setAttribute("type", 1);
					jsp = "member/checkTel";
				}
			// 중복되고 로그인 안 한 상태라면 (회원가입의 경우)
			} else if(checkTel != null && sessId == null) {
				request.setAttribute("type", 1);
				jsp = "member/checkTel";
			// 중복 안 된 상태
			} else {
				request.setAttribute("type", 2);
				jsp = "member/checkTel";
			}
			break;
			
		case "/member/checkCar.do":
			// 중복확인할 값
			String carNo = request.getParameter("carNo");
			// 확인된 중복된 값
			String checkCar = (String) Execute.run(memberCheckService, new Object[] {carNo, "carNo"});
			// 현재 세션의 아이디
			sessId = (String) session.getAttribute("id");
			// 중복되고 로그인 상태라면(수정할 때의 경우)
			if(checkCar != null && sessId != null) {
				MemberVO checkCarVO = (MemberVO) Execute.run(memberViewPService, sessId);
				// 중복된 값이 로그인된 아이디의 값과 일치한다면
				if(checkCar.equals(checkCarVO.getNickname())) {
					request.setAttribute("type", 2);
					jsp = "member/checkCar";
				} else {
					request.setAttribute("type", 1);
					jsp = "member/checkCar";
				}
			// 중복되고 로그인 안 한 상태라면 (회원가입의 경우)
			} else if(checkCar != null && sessId == null) {
				request.setAttribute("type", 1);
				jsp = "member/checkCar";
			// 중복 안 된 상태
			} else {
				request.setAttribute("type", 2);
				jsp = "member/checkCar";
			}
			break;
			
		case "/member/checkLicense.do":
			String licenseNo = request.getParameter("licenseNo");
			if(Execute.run(memberCheckDService, new Object[] {licenseNo, "licenseNo"}) != null) {
				request.setAttribute("type", 1);
				jsp = "member/checkLicense";
			} else {
				request.setAttribute("type", 2);
				jsp = "member/checkLicense";
			}
			break;
			
		case "/member/findId.do":
			if(method.equals("GET")) {
				jsp = "member/findId";
			} else {
				MemberVO findIdVO = new MemberVO();
				findIdVO.setName(request.getParameter("name"));
				findIdVO.setTel(request.getParameter("tel_1")+"-"+request.getParameter("tel_2")+"-"+request.getParameter("tel_3"));
				String findId = (String) Execute.run(memberFindIdService, findIdVO);
				if(findId != null) {
					request.setAttribute("id", findId);
					request.setAttribute("type", 1);
				}
				jsp = "member/find";
			}
			break;
			
		case "/member/findPw.do":
			if(method.equals("GET")) {
				jsp = "member/findPw";
			} else {
				MemberVO findPwVO = new MemberVO();
				findPwVO.setId(request.getParameter("id"));
				findPwVO.setName(request.getParameter("name"));
				findPwVO.setTel(request.getParameter("tel_1")+"-"+request.getParameter("tel_2")+"-"+request.getParameter("tel_3"));
				String findPw = (String) Execute.run(memberFindPwService, findPwVO);
				if(findPw != null) {
					request.setAttribute("pw", findPw);
					request.setAttribute("type", 2);
				}
				jsp = "member/find";
			}
			break;
			
		case "/member/find.do":
			request.getParameter("id");
			request.getParameter("pw");
			request.getParameter("type");
			jsp = "member/find";
			break;
			
			
		// 회원--------------------------------------------------------------------------------	
			
		case "/member/logout.do":
			session = request.getSession();
			session.removeAttribute("login");
			jsp = "redirect:/";
			break;
		
		case "/member/myPage.do":
			String myPageId = request.getParameter("id");
			viewService(myPageId, session, memberMyPagePService, memberMyPageDService, request);
//			LoginVO myVO = (LoginVO) session.getAttribute("login");
//			if(myVO.getGradeNo() == 2) {
//				MemberVO myPageVO = (MemberVO) Execute.run(memberMyPageDService, myPageId);
//				request.setAttribute("vo", myPageVO);
//			} else {
//				MemberVO myPageVO = (MemberVO) Execute.run(memberMyPagePService, myPageId);
//				request.setAttribute("vo", myPageVO);
//			}
			jsp = "member/myPage";
			break;
			
		case "/member/update.do":
			String updateId = request.getParameter("id");
			if(method.equals("GET")) {
				viewService(updateId, session, memberViewPService, memberViewDService, request);
//				MemberVO updateVO = (MemberVO) Execute.run(memberViewPService, updateId);
//				if(updateVO.getGradeNo() == 1 || updateVO.getGradeNo() == 9) {
//					request.setAttribute("vo", updateVO);
//				} else if(updateVO.getGradeNo() == 2) {
//					MemberVO update2VO = (MemberVO) Execute.run(memberViewDService, updateId);
//					request.setAttribute("vo", update2VO);
//				}
				jsp = "member/update";
			} else {
				MemberVO updateVO = new MemberVO();
				updateVO.setId(updateId);
				updateVO.setNickname(request.getParameter("nickname"));
				updateVO.setTel(request.getParameter("tel_1")+"-"+request.getParameter("tel_2")+"-"+request.getParameter("tel_3"));
				updateVO.setBank(request.getParameter("bank"));
				updateVO.setAccount(request.getParameter("account"));
				Execute.run(memberUpdateService, updateVO);
				
				LoginVO update2VO = (LoginVO) session.getAttribute("login");
				if(update2VO.getGradeNo() == 2) {
					updateVO.setCarModel(request.getParameter("carModel"));
					updateVO.setCarNo(request.getParameter("carNo"));
					Execute.run(memberUpdateDService, updateVO);
				}
				jsp = "redirect:myPage.do?id=" + updateId;
			}
			break;
			
		case "/member/changePw.do":
			String changePwId = request.getParameter("id");
			if(method.equals("GET")) {
				jsp = "member/changePw";
			} else {
				changePwId = request.getParameter("id");
				String oldPw = request.getParameter("oldPw");
				String pw = request.getParameter("pw");
				Execute.run(memberChangePwService, new Object[] {changePwId, oldPw, pw});
				jsp = "redirect:notice.do?id=" + changePwId;
			}
			break;
			
		case "/member/joinDriver.do":
			if(method.equals("GET")) {
				jsp = "member/joinDriver";
			} else {
				MemberVO joinDriverVO = new MemberVO();
				joinDriverVO.setId(request.getParameter("id"));
				joinDriverVO.setCarModel(request.getParameter("carModel"));
				joinDriverVO.setCarNo(request.getParameter("carNo"));
				joinDriverVO.setLicenseNo(request.getParameter("licenseNo"));
				Integer result = (Integer) Execute.run(memberJoinDriverService, joinDriverVO);
				
				if(result == 1) {
					joinDriverVO.setGradeNo(2);
					Execute.run(memberChangeGradeService, joinDriverVO);
//					request.setAttribute("type", 1);
				}
				
				((LoginVO)(session.getAttribute("login"))).setGradeNo(2);
				jsp = "redirect:notice.do?id=" + joinDriverVO.getId();
			}
			break;
			
		case "/member/notice.do":
			jsp = "member/notice";
			break;
			
		case "/member/leave.do":
			MemberVO deleteVO = new MemberVO();
			deleteVO.setId(request.getParameter("id"));
			deleteVO.setPw(request.getParameter("pw"));
			Execute.run(memberLeaveService, deleteVO);
			session = request.getSession();
			session.removeAttribute("login");
			jsp = "redirect:/";
			break;
		
		//관리자----------------------------------------------------------------------------------
			
		case "/member/list.do":
			request.setAttribute("list", Execute.run(memberListService, null));
			jsp = "member/list";
			break;
			
		case "/member/view.do":
			String viewId = request.getParameter("id");
			viewService(viewId, session, memberViewPService, memberViewDService, request);
//			MemberVO viewPVO = (MemberVO) Execute.run(memberViewPService, viewId);
//			if(viewPVO.getGradeNo() == 1 || viewPVO.getGradeNo() == 9) {
//				request.setAttribute("vo", viewPVO);
//			} else if(viewPVO.getGradeNo() == 2) {
//				MemberVO viewDVO = (MemberVO) Execute.run(memberViewDService, viewId);
//				request.setAttribute("vo", viewDVO);
//			}
			jsp = "member/view";
			break;
			
		case "/member/changeStatus.do":
			String changeStatusId = request.getParameter("id");
			if(method.equals("GET")) {
				viewService(changeStatusId, session, memberViewPService, memberViewDService, request);
//				MemberVO viewVO = (MemberVO) Execute.run(memberViewPService, changeId);
//				if(viewVO.getGradeNo() == 1 || viewVO.getGradeNo() == 9) {
//					request.setAttribute("vo", viewVO);
//				} else if(viewVO.getGradeNo() == 2) {
//					MemberVO view2VO = (MemberVO) Execute.run(memberViewDService, changeId);
//					request.setAttribute("vo", view2VO);
//				}
				jsp = "member/changeStatus";
			} else {
				MemberVO changeVO = new MemberVO();
				changeVO.setId(changeStatusId);
				changeVO.setStatus(request.getParameter("status"));
				Execute.run(memberChangeStatusService, changeVO);
				jsp = "redirect:view.do?id=" + changeStatusId;
			}
			break;
			
		case "/member/changeGrade.do":
			String changeGradeId = request.getParameter("id");
			if(method.equals("GET")) {
				viewService(changeGradeId, session, memberViewPService, memberViewDService, request);
//				MemberVO viewVO = (MemberVO) Execute.run(memberViewPService, changeId);
//				if(viewVO.getGradeNo() == 1 || viewVO.getGradeNo() == 9) {
//					request.setAttribute("vo", viewVO);
//				} else if(viewVO.getGradeNo() == 2) {
//					MemberVO view2VO = (MemberVO) Execute.run(memberViewDService, changeId);
//					request.setAttribute("vo", view2VO);
//				}
				jsp = "member/changeGrade";
			} else {
				MemberVO changeVO = new MemberVO();
				changeVO.setId(changeGradeId);
				long gradeNo = Long.parseLong(request.getParameter("grade").substring(0, 1));
				changeVO.setGradeNo(gradeNo);
				Execute.run(memberChangeGradeService, changeVO);
				jsp = "redirect:view.do?id=" + changeGradeId;
			}
			break;

		default:
			throw new Exception("잘못된 페이지를 요청하셨습니다.");
		}
		
  		return jsp;
	}
	
	// view 서비스에 사용되는 아주아주 긴 코드를 간소화하기 위한 메서드
	private void viewService(String id, HttpSession session, ServiceInterface PService, ServiceInterface DService, HttpServletRequest request) throws Exception {
		LoginVO vo = (LoginVO) session.getAttribute("login");
		if(vo.getGradeNo() == 2) {
			MemberVO vo2 = (MemberVO) Execute.run(DService, id);
			request.setAttribute("vo", vo2);
		} else {
			MemberVO vo2 = (MemberVO) Execute.run(PService, id);
			request.setAttribute("vo", vo2);
		}
	}
	
//	private void checkService(HttpSession session, HttpServletRequest request, String jsp, String col, String col2) throws Exception {
//		// 중복확인할 변수의 값
//		String pCol = request.getParameter(col);
//		System.out.println(col);
//		System.out.println("*" + pCol);
//		// 확인된 중복된 값
//		String check = (String) Execute.run(memberCheckService, new Object[] {pCol, col});
//		System.out.println("**" + check);
//		// 현재 세션 아이디
////		String id = (String) session.getAttribute("id");
////		System.out.println("***"+id);
//		if(check != null && session.getAttribute("id") != null) {
//			MemberVO vo = (MemberVO) Execute.run(memberViewPService, session.getAttribute("id"));
//			String SCol = null;
//			switch (col) {
//			case "nickname":
//				SCol = vo.getNickname();
//				break;
//				
//			case "tel":
//				SCol = vo.getTel();
//				break;
//				
//			case "carNo":
//				SCol = vo.getCarNo();
//				break;
//
//			default:
//				
//			}
//			System.out.println("****"+SCol);
//			if(check.equals(SCol)) {
//				request.setAttribute("type", 2);
//				jsp = "member/check" + col2;
//			} else {
//				request.setAttribute("type", 1);
//				jsp = "member/check" + col2;
//			}
//		} else if(check != null && session.getAttribute("id") == null) {
//			request.setAttribute("type", 1);
//			jsp = "member/check" + col2;
//		} else {
//			request.setAttribute("type", 2);
//			jsp = "member/check" + col2;
//		}
//	}
}

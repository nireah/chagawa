package com.chagawa.common.filter;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


/**
 * Servlet Filter implementation class AuthorityFilter
 */
@WebFilter("/AuthorityFilter")
public class AuthorityFilter extends HttpFilter implements Filter {
	private static final long serialVersionUID = 1L;

	// 페이지별로 필요한 권한 등급을 저장하는 Map - 드라이버나 관리자만 접속 가능한 페이지에 사용
	private Map<String, Integer> authMap = new HashMap<>();

	/**
	 * @see HttpFilter#HttpFilter()
	 */
	public AuthorityFilter() {
		super();
		// Filter의 생성자
	}

	/**
	 * @see Filter#destroy()
	 */
	public void destroy() {
	}

	/**
	 * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)
	 */
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		System.out.println("AuthorityFilter.doFilter() 실행");

		// 권한 확인 작업
		HttpServletRequest req = (HttpServletRequest) request;
		HttpServletResponse res = (HttpServletResponse) response;

		String uri = req.getRequestURI();
		Integer pageGradeNo = authMap.get(uri); // authMap에서 해당 uri에 필요한 권한정보 꺼내기 -> 해당 uri가 authMap에 없으면 null이 나옴

//		if (pageGradeNo != null) { // 권한이 필요한 경우 - 로그인 기능 생성 이후 주석 해제할 것
//			HttpSession session = req.getSession();
//			LoginVO vo = (LoginVO) session.getAttribute("login");
//			
//			//관리자만 접속 가능한 페이지인 경우
//			if (pageGradeNo == 9) {
//				if (vo == null || vo.getGradeNo() != 9) {  //로그인하지 않았거나 등급이 9가 아니면
//					res.sendRedirect("/error/authError.do");
//					return;
//				}
//			}
//
//			//회원이어야 접속 가능한 페이지인 경우
//			if (vo == null) { //로그인 정보가 없으면
//				res.sendRedirect("/error/loginError.do");
//				return;
//			}
//			
//		}

		// 조건이 맞는 경우 여기로 이동 -> 다른 필터가 없는 경우 DispatcherServlet의 service() 실행
		chain.doFilter(request, response);
	}

	/**
	 * @see Filter#init(FilterConfig)
	 */
	public void init(FilterConfig fConfig) throws ServletException {
		//권한이 필요한 페이지의 url과 등급정보를 authMap에 put()
		
	}

}

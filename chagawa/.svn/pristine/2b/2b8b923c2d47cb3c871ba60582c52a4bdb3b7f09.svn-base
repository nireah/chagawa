package com.chagawa.carpool.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import com.chagawa.carpool.vo.CarpoolVO;
import com.chagawa.carpool.vo.PassengerVO;
import com.chagawa.main.Execute;
import com.chagawa.main.ServiceInterface;
import com.chagawa.member.vo.LoginVO;
import com.webjjang.util.PageObject;

public class CarpoolController {

	private ServiceInterface carpoolListService;
	private ServiceInterface carpoolMyDriveListService;
	private ServiceInterface carpoolMyPsgListService;
	private ServiceInterface carpoolNowService;
	private ServiceInterface carpoolViewService;
	private ServiceInterface carpoolWriteService;
	private ServiceInterface carpoolApplyService;
	private ServiceInterface carpoolFixService;
	private ServiceInterface carpoolStopApplyService;
	private ServiceInterface carpoolGetInService;
	private ServiceInterface carpoolStartService;
	private ServiceInterface carpoolArriveService;
	private ServiceInterface carpoolArriveCheckService;
	private ServiceInterface carpoolCancelService;
	private ServiceInterface carpoolCancelApplyService;

	public void setCarpoolListService(ServiceInterface carpoolListService) {
		this.carpoolListService = carpoolListService;
	}

	public void setCarpoolMyDriveListService(ServiceInterface carpoolMyDriveListService) {
		this.carpoolMyDriveListService = carpoolMyDriveListService;
	}

	public void setCarpoolMyPsgListService(ServiceInterface carpoolMyPsgListService) {
		this.carpoolMyPsgListService = carpoolMyPsgListService;
	}

	public void setCarpoolNowService(ServiceInterface carpoolNowService) {
		this.carpoolNowService = carpoolNowService;
	}

	public void setCarpoolViewService(ServiceInterface carpoolViewService) {
		this.carpoolViewService = carpoolViewService;
	}

	public void setCarpoolWriteService(ServiceInterface carpoolWriteService) {
		this.carpoolWriteService = carpoolWriteService;
	}

	public void setCarpoolApplyService(ServiceInterface carpoolApplyService) {
		this.carpoolApplyService = carpoolApplyService;
	}

	public void setCarpoolFixService(ServiceInterface carpoolFixService) {
		this.carpoolFixService = carpoolFixService;
	}

	public void setCarpoolStopApplyService(ServiceInterface carpoolStopApplyService) {
		this.carpoolStopApplyService = carpoolStopApplyService;
	}

	public void setCarpoolGetInService(ServiceInterface carpoolGetInService) {
		this.carpoolGetInService = carpoolGetInService;
	}

	public void setCarpoolStartService(ServiceInterface carpoolStartService) {
		this.carpoolStartService = carpoolStartService;
	}

	public void setCarpoolArriveService(ServiceInterface carpoolArriveService) {
		this.carpoolArriveService = carpoolArriveService;
	}

	public void setCarpoolArriveCheckService(ServiceInterface carpoolArriveCheckService) {
		this.carpoolArriveCheckService = carpoolArriveCheckService;
	}

	public void setCarpoolCancelService(ServiceInterface carpoolCancelService) {
		this.carpoolCancelService = carpoolCancelService;
	}

	public void setCarpoolCancelApplyService(ServiceInterface carpoolCancelApplyService) {
		this.carpoolCancelApplyService = carpoolCancelApplyService;
	}

	@SuppressWarnings("unchecked")
	public String execute(HttpServletRequest request) throws Exception {
		String uri = request.getRequestURI();
		String method = request.getMethod();
		System.out.println("CarpoolController.execute() - uri: " + uri + " | method: " + method);
		String jsp = null;
		LoginVO login = (LoginVO) request.getSession().getAttribute("login");
		boolean isLogin = (login == null) ? false : true;
		switch (uri) {

		// 카풀 리스트 : 지역 입력해야 조회됨
		case "/carpool/list.do":
			String startRegion = request.getParameter("startRegion");
			if (startRegion != null) {
				String arriveRegion = request.getParameter("arriveRegion");
				PageObject pageObject = PageObject.getInstance(request);
				CarpoolVO listVO = new CarpoolVO();
				listVO.setStartRegion(startRegion);
				listVO.setArriveRegion(arriveRegion);
				request.setAttribute("list",
						(List<CarpoolVO>) Execute.run(carpoolListService, new Object[] { listVO, pageObject }));
				request.setAttribute("pageObject", pageObject);
			}
			jsp = "carpool/list";
			break;

		// 카풀 보기 : 카풀 상태가 모집중인 경우에만 적용 - 아닐 경우 접근 시 에러 나도록 향후 조치 필요
		case "/carpool/view.do":
			boolean isPsg = false; // 동승신청 버튼 출력 여부 확인용 변수 - 현재 신청중이면 안 뜸

			// view로 카풀 정보를 받아옴
			Long viewNo = Long.parseLong(request.getParameter("no"));
			CarpoolVO viewVO = (CarpoolVO) Execute.run(carpoolViewService, viewNo);

			// 카풀 정보 중 동승자 정보를 신청/확정으로 나누어 저장
			List<PassengerVO> viewPsgList = viewVO.getPsgList();
			List<PassengerVO> viewPsgAppList = null;
			List<PassengerVO> viewPsgFixList = null;

			if (viewPsgList != null && viewPsgList.size() > 0) {
				for (PassengerVO pvo : viewPsgList) {
					if (pvo.getFixed() == 1) {
						if (viewPsgFixList == null)
							viewPsgFixList = new ArrayList<>();
						viewPsgFixList.add(pvo);
					} else {
						if (viewPsgAppList == null)
							viewPsgAppList = new ArrayList<>();
						viewPsgAppList.add(pvo);
					}
					// 로그인과 일치하는 동승자 정보가 있으면 신청버튼 출력 안 함
					if (isLogin && login.getId().equals(pvo.getId())) {
						isPsg = true;
					}
				}
			}

			// 카풀, 동승자 정보, 신청버튼 출력여부 세팅
			request.setAttribute("vo", viewVO);
			request.setAttribute("psgAppList", viewPsgAppList);
			request.setAttribute("psgFixList", viewPsgFixList);
			if (isPsg)
				request.setAttribute("isPsg", 1);

			// 해당 카풀의 드라이버일 경우 드라이버 페이지, 그 외는 신청자 페이지 출력
			if (isLogin && login.getId().equals(viewVO.getId())) {
				jsp = "carpool/driverView";
			} else {
				jsp = "carpool/view";
			}
			break;

		// 카풀 등록 - post로 폼 제출 시 list.do로 이동
		case "/carpool/write.do":
			if (method.equals("GET")) {
				jsp = "carpool/write";
			} else {
				CarpoolVO writeVO = new CarpoolVO();
				writeVO.setId(request.getParameter("id"));
				writeVO.setStartRegion(request.getParameter("startRegion"));
				writeVO.setStartAddress(request.getParameter("startAddress"));
				writeVO.setArriveRegion(request.getParameter("arriveRegion"));
				writeVO.setArriveAddress(request.getParameter("arriveAddress"));
				writeVO.setStartTimePre(request.getParameter("startTimePre").replace("T", " "));
				writeVO.setArriveTimePre(request.getParameter("arriveTimePre").replace("T", " "));
				writeVO.setMemo(request.getParameter("memo"));
				Integer wprice = Integer.parseInt(request.getParameter("price"));
				Integer wseats = Integer.parseInt(request.getParameter("seats"));
				writeVO.setPrice(wprice);
				writeVO.setSeats(wseats);
				if ((Integer) Execute.run(carpoolWriteService, writeVO) == 1) {
					jsp = "redirect:/carpool/list.do";
				} else {
					System.out.println("Write의 결과값이 1이 아님");
				}
			}
			break;

		// now 페이지 : 현재 이용중인 카풀이 없으면 none으로, 있으면 상태에 따라 이동
		case "/carpool/now.do": // 로그인해야 접속가능하게 할것
			String nowId = login.getId();

			// 로그인 id를 이용해 현재 이용중인 카풀 정보 확인
			CarpoolVO nowVO = (CarpoolVO) Execute.run(carpoolNowService, nowId);

			// 이용 중인 카풀이 있는 경우
			if (nowVO != null) {

				// 동승자인 경우 상태를 변수에 저장
				String pstatus = nowVO.getPstatus();
				// 카풀 상세정보 불러오기
				nowVO = (CarpoolVO) Execute.run(carpoolViewService, nowVO.getNo());

				// 모집중인 경우 -> view.do와 동일 (드라이버 여부 확인하여 이동)
				if (nowVO.getStatus().equals("모집중")) {
					if (nowVO.getId().equals(nowId)) {
						jsp = "carpool/driverView"; // 드라이버 페이지
					} else {
						jsp = "carpool/view"; // 동승자 페이지
					}

					// 도착 시에는 운전자 및 도착확인한 동승자는 finish.jsp로 이동, 나머지는 now.jsp에서 도착확인 처리 필요
				} else if (nowVO.getStatus().equals("도착")) {
					if (!nowVO.getId().equals(nowId)) {
						if (pstatus.equals("도착")) {
							jsp = "carpool/finish"; // 도착한 동승자
						} else {
							jsp = "carpool/now"; // 도착안한 동승자
						}
					} else
						jsp = "carpool/finish"; // 드라이버
				} else {
					// 마감한 뒤로 도착 전까지는 now 출력. 미탑승 동승자는 미탑승 페이지 출력
					if (pstatus != null && pstatus.equals("미탑승")) { // 미탑승 동승자
						jsp = "carpool/notin";
					} else
						jsp = "carpool/now";

				}
			} else {
				jsp = "carpool/none"; // 현재 이용 중인 카풀 없으면 none 화면 출력
			}
			break;

		// 동승신청 기능(로그인 필요) -> 모집 중이므로 view로 이동
		case "/carpool/apply.do":
			String applyId = login.getId();
			Long applyNo = Long.parseLong(request.getParameter("cpNo"));

			// 현재 이용중인 카풀이 없는지 확인 후 insert
			if ((CarpoolVO) Execute.run(carpoolNowService, applyId) != null) {
				// exist는 카풀 있다고 알림 띄우는 용도
				jsp = "redirect:/carpool/view.do?no=" + applyNo + "&exist=1";
			} else {
				// 이용 중인 카풀이 없으면 insert 실행 후 view로 이동
				PassengerVO applyVO = new PassengerVO();
				Long applyCpno = Long.parseLong(request.getParameter("cpNo"));
				applyVO.setCpNo(applyCpno);
				applyVO.setId(applyId);
				applyVO.setMsg(request.getParameter("msg"));
				Integer result = (Integer) Execute.run(carpoolApplyService, applyVO);
				if (result == 1) {
					jsp = "redirect:/carpool/view.do?no="+applyNo;
				} else
					System.out.println("apply 결과가 1이 아님");
			}
			break;
			
		//동승신청 취소 기능
		case "/carpool/cancelapply.do":
			PassengerVO cancelApplyVO = new PassengerVO();
			Long cancelApplyCpno = Long.parseLong(request.getParameter("cpNo"));
			cancelApplyVO.setCpNo(cancelApplyCpno);
			cancelApplyVO.setId(login.getId());
			if((Integer)Execute.run(carpoolCancelApplyService, cancelApplyVO)==1) {
				jsp = "redirect:/carpool/list.do";
			}else
			System.out.println("cancelApply 결과가 1이 아님");
			break;
			
		//동승확정 기능
		case "/carpool/fix.do":
			PassengerVO fixVO = new PassengerVO();
			Long fixNo = Long.parseLong(request.getParameter("cpNo"));
			fixVO.setCpNo(fixNo);
			fixVO.setId(request.getParameter("psgId"));
			if ((Integer) Execute.run(carpoolFixService, fixVO) == 1)
				jsp = "redirect:/carpool/now.do";
			else
				System.out.println("fix의 결과값이 1이 아님");
			break;
		case "/carpool/stopapply.do":
			Long stopNo = Long.parseLong(request.getParameter("cpNo"));
			Execute.run(carpoolStopApplyService, stopNo);
			jsp = "redirect:/carpool/now.do";
			break;
		case "/carpool/getin.do":
			Execute.run(carpoolGetInService, null);
			jsp = "redirect:/carpool/now.do";
			break;
		case "/carpool/start.do":
			Execute.run(carpoolStartService, null);
			jsp = "redirect:/carpool/now.do";
			break;
		case "/carpool/arrive.do":
			Execute.run(carpoolArriveService, null);
			jsp = "finish.do";
			break;
		case "/carpool/finish.do":
			Execute.run(carpoolArriveCheckService, null);
			jsp = "carpool/finish";
			break;
		case "/carpool/cancel.do":
			// 취소 페이지가 따로 없는 대신 메시지 발송 예정
			Long caecelNo = Long.parseLong(request.getParameter("cpNo"));
			Execute.run(carpoolCancelService, caecelNo);
			jsp = "redirect:/carpool/mylist.do";
			break;
		case "/carpool/mylist.do":
			String isDriver = request.getParameter("isDriver");
			if (isDriver != null) {
				PageObject pageObject = PageObject.getInstance(request);
				String myid = request.getParameter("id");
				List<CarpoolVO> mylist = null;
				if (isDriver.equals("driver")) {
					mylist = (List<CarpoolVO>) Execute.run(carpoolMyDriveListService,
							new Object[] { myid, pageObject });
				} else if (isDriver.equals("psg")) {
					mylist = (List<CarpoolVO>) Execute.run(carpoolMyPsgListService, new Object[] { myid, pageObject });
				}
				request.setAttribute("mylist", mylist);
				request.setAttribute("pageObject", pageObject);
			}
			jsp = "carpool/mylist";
			break;
		default:
			jsp = "redirect:/error/404.do";
		}
		return jsp;
	}

//	private ServiceInterface carpoolReviewedService; //후기 기능
//	private ServiceInterface carpoolUnreviewedService; // 후기 기능

}
